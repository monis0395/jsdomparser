import { NodeProps, NodeType } from "./contracts/type";
import { Element } from "./element";
import { Document } from "./document";
export declare class Node implements NodeProps {
    nodeName: string;
    nodeValue: string;
    nodeType: NodeType;
    children: Element[];
    childNodes: Node[];
    _parentNode: Node;
    _parentElement: Element;
    _previousSibling: Node | null;
    _nextSibling: Node | null;
    _previousElementSibling: Element | null;
    _nextElementSibling: Element | null;
    sourceCodeLocation?: string;
    private _ownerDocument;
    constructor(props: NodeProps);
    get baseURI(): string;
    get firstChild(): Node;
    get firstElementChild(): Element;
    get lastChild(): Node;
    get lastElementChild(): Element;
    get nextElementSibling(): Element;
    get nextSibling(): Node;
    get parentElement(): Element;
    get parentNode(): Node;
    get previousElementSibling(): Element;
    get previousSibling(): Node;
    get textContent(): string;
    set textContent(data: string);
    get ownerDocument(): Document;
    setOwnerDocument(node: Document): void;
    appendChild(newChild: Node): void;
    insertBefore(newNode: any, referenceNode: any): any;
    removeChild(child: Node): Node;
    replaceChild(newChild: Node, oldChild: Node): Node;
}
